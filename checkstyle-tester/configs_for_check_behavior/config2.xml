<?xml version="1.0"?>
<!DOCTYPE module PUBLIC
        "-//Puppy Crawl//DTD Check Configuration 1.3//EN"
        "http://www.puppycrawl.com/dtds/configuration_1_3.dtd">

<module name="Checker">
    <property name="charset" value="UTF-8"/>

    <!-- do not change severity to 'error', as that will hide errors caused by exceptions -->
    <property name="severity" value="warning"/>

    <!-- haltOnException is required for exception fixes and reporting of all exceptions -->
    <property name="haltOnException" value="false"/>

    <!-- BeforeExecutionFileFilters is required for sources of java9 -->
    <module name="BeforeExecutionExclusionFileFilter">
        <property name="fileNamePattern" value="module\-info\.java$"/>
    </module>

    <module name="TreeWalker">

        <property name="tabWidth" value="4"/>

        <!-- Annotations -->
        <module name="AnnotationLocation">
            <property name="tokens" value="ANNOTATION_DEF"/>
            <property name="tokens" value="ANNOTATION_FIELD_DEF"/>
            <property name="tokens" value="PACKAGE_DEF"/>
            <property name="tokens" value="ENUM_CONSTANT_DEF"/>
            <property name="tokens" value="VARIABLE_DEF"/>
            <property name="allowSamelineSingleParameterlessAnnotation" value="false"/>
        </module>
        <module name="AnnotationOnSameLine">
            <!-- we can not use it as it conflicts with AnnotationLocation -->
            <property name="severity" value="ignore"/>
            <property name="tokens" value="METHOD_DEF"/>
            <property name="tokens" value="CTOR_DEF"/>
            <property name="tokens" value="TYPECAST"/>
            <property name="tokens" value="DOT"/>
            <property name="tokens" value="CLASS_DEF"/>
            <property name="tokens" value="ENUM_DEF"/>
            <property name="tokens" value="INTERFACE_DEF"/>
            <property name="tokens" value="TYPE_ARGUMENT"/>
            <property name="tokens" value="ANNOTATION_DEF"/>
            <property name="tokens" value="LITERAL_NEW"/>
            <property name="tokens" value="LITERAL_THROWS"/>
            <property name="tokens" value="VARIABLE_DEF"/>
            <property name="tokens" value="PARAMETER_DEF"/>
            <property name="tokens" value="IMPLEMENTS_CLAUSE"/>
            <property name="tokens" value="ANNOTATION_FIELD_DEF"/>
            <property name="tokens" value="RECORD_DEF"/>
            <property name="tokens" value="COMPACT_CTOR_DEF"/>
        </module>
        <module name="AnnotationUseStyle"/>
        <module name="MissingDeprecated"/>
        <module name="MissingOverride"/>
        <module name="PackageAnnotation"/>
        <module name="SuppressWarnings">
            <property name="format" value="^((?!unchecked|deprecation|rawtypes|resource).)*$"/>
            <message key="suppressed.warning.not.allowed"
                     value="The warning ''{0}'' cannot be suppressed at this location.
           Only few javac warnings are allowed to suppress.
           If try to suppress checkstyle/pmd/..... violation please do this in their config file.
           If you try to suppress IntelliJ IDEA inspection,
           please use javadoc block tag @noinspection"
            />
        </module>
        <module name="SuppressWarningsHolder"/>

        <!-- Block Checks -->
        <module name="AvoidNestedBlocks">
            <property name="allowInSwitchCase" value="true"/>
        </module>
        <module name="EmptyBlock">
            <property name="tokens" value="LITERAL_CATCH"/>
            <property name="tokens" value="ARRAY_INIT"/>
            <property name="tokens" value="LITERAL_DEFAULT"/>
            <property name="tokens" value="LITERAL_CASE"/>
            <property name="tokens" value="INSTANCE_INIT"/>
            <property name="tokens" value="LITERAL_DO"/>
            <property name="tokens" value="LITERAL_ELSE"/>
            <property name="tokens" value="LITERAL_FINALLY"/>
            <property name="tokens" value="LITERAL_FOR"/>
            <property name="tokens" value="LITERAL_IF"/>
            <property name="tokens" value="LITERAL_SWITCH"/>
            <property name="tokens" value="LITERAL_SYNCHRONIZED"/>
            <property name="tokens" value="LITERAL_TRY"/>
            <property name="tokens" value="LITERAL_WHILE"/>
            <property name="tokens" value="STATIC_INIT"/>
            <property name="option" value="text"/>
        </module>
        <module name="EmptyCatchBlock"/>
        <module name="LeftCurly"/>
        <module name="NeedBraces"/>
        <module name="NeedBraces">
            <property name="tokens" value="LAMBDA"/>
            <property name="allowSingleLineStatement" value="true"/>
        </module>
        <module name="RightCurly">
            <property name="tokens" value="METHOD_DEF"/>
            <property name="tokens" value="CTOR_DEF"/>
            <property name="tokens" value="CLASS_DEF"/>
            <property name="tokens" value="INSTANCE_INIT"/>
            <property name="tokens" value="LITERAL_FOR"/>
            <property name="tokens" value="STATIC_INIT"/>
            <property name="tokens" value="LITERAL_WHILE"/>
            <property name="tokens" value="LITERAL_CATCH"/>
            <property name="tokens" value="LITERAL_ELSE"/>
            <property name="tokens" value="LITERAL_FINALLY"/>
            <property name="tokens" value="LITERAL_IF"/>
            <property name="tokens" value="LITERAL_TRY"/>
            <property name="tokens" value="ANNOTATION_DEF"/>
            <property name="tokens" value="ENUM_DEF"/>
            <property name="tokens" value="RECORD_DEF"/>
            <property name="tokens" value="COMPACT_CTOR_DEF"/>
            <property name="option" value="alone"/>
        </module>
        <module name="RightCurly">
            <property name="tokens" value="LITERAL_DO"/>
            <property name="option" value="same"/>
        </module>
        <module name="RightCurly">
            <property name="tokens" value="INTERFACE_DEF"/>
            <property name="option" value="alone_or_singleline"/>
        </module>

        <!-- Class Design -->
        <module name="DesignForExtension">
            <property name="ignoredAnnotations"
                      value="Override, Test, Before, After, BeforeClass, AfterClass"/>
            <property name="ignoredAnnotations"
                      value="BeforeAll, AfterAll, BeforeEach, AfterEach"/>
        </module>
        <module name="FinalClass"/>
        <module name="HideUtilityClassConstructor"/>
        <module name="InnerTypeLast"/>
        <module name="InterfaceIsType"/>
        <module name="MutableException"/>
        <module name="OneTopLevelClass"/>
        <module name="ThrowsCount">
            <property name="max" value="2"/>
        </module>
        <module name="VisibilityModifier">
            <property name="ignoreAnnotationCanonicalNames"
                      value="org.junit.Rule, org.junit.jupiter.api.io.TempDir"/>
        </module>

        <!-- Coding -->
        <module name="ArrayTrailingComma"/>
        <module name="AvoidDoubleBraceInitialization"/>
        <module name="AvoidInlineConditionals"/>
        <module name="AvoidNoArgumentSuperConstructorCall"/>
        <module name="CovariantEquals"/>
        <module name="DeclarationOrder"/>
        <module name="DefaultComesLast"/>
        <module name="EmptyStatement"/>
        <module name="EqualsAvoidNull"/>
        <module name="EqualsHashCode"/>
        <module name="ExplicitInitialization"/>
        <module name="FallThrough"/>
        <module name="FinalLocalVariable"/>
        <module name="HiddenField">
            <property name="ignoreConstructorParameter" value="true"/>
            <property name="ignoreSetter" value="true"/>
            <property name="setterCanReturnItsClass" value="true"/>
        </module>
        <module name="IllegalCatch">
            <property name="illegalClassNames"
                      value="java.lang.Exception,
                       java.lang.Throwable,
                       java.lang.RuntimeException,
                       java.lang.NullPointerException"/>
        </module>
        <module name="IllegalInstantiation">
            <property name="classes"
                      value="org.xml.sax.SAXException, org.xml.sax.SAXParseException,
                       org.apache.commons.beanutils.ConversionException,
                       org.antlr.v4.runtime.misc.ParseCancellationException,
                       antlr.RecognitionException, antlr.TokenStreamException,
                       antlr.TokenStreamRecognitionException, antlr.ANTLRException,
                       java.lang.StringBuffer"/>
        </module>
        <module name="IllegalThrows"/>
        <module name="IllegalToken">
            <property name="tokens" value="LABELED_STAT"/>
            <property name="tokens" value="LITERAL_NATIVE"/>
            <property name="tokens" value="LITERAL_VOLATILE"/>
            <property name="tokens" value="LITERAL_ASSERT"/>
        </module>
        <module name="IllegalTokenText">
            <property name="tokens" value="STRING_LITERAL"/>
            <property name="format" value="^(US-ASCII|ISO-8859-1|UTF-8|UTF-16BE|UTF-16LE|UTF-16)$"/>
            <property name="ignoreCase" value="true"/>
        </module>
        <module name="IllegalType">
            <property name="illegalClassNames"
                      value="java.util.HashSet, HashSet, java.util.LinkedHashMap, LinkedHashMap,
                       java.util.TreeMap, TreeMap, java.util.HashMap, HashMap,
                       java.util.LinkedHashSet, LinkedHashSet, java.util.TreeSet, TreeSet,
                       java.lang.StringBuffer, StringBuffer"/>
        </module>
        <module name="InnerAssignment"/>
        <module name="MagicNumber"/>
        <module name="MatchXpath">
            <property name="query" value="//CLASS_DEF[@text!='Checker' and @text!='Main']
      //LITERAL_CATCH//METHOD_CALL[.//IDENT[@text = 'printStackTrace']]/.."/>
            <message key="matchxpath.match" value="Avoid using 'printStackTrace'."/>
        </module>
        <module name="MatchXpath">
            <property name="query" value="//METHOD_DEF/MODIFIERS//
            ANNOTATION[./IDENT[@text='Test']]/ANNOTATION_MEMBER_VALUE_PAIR
            [./IDENT[@text='expected']]"/>
            <message key="matchxpath.match" value="Avoid using 'expected' attribute in Test annotation."/>
        </module>
        <module name="MissingCtor">
            <!--
              we will not use that fanatic validation, extra code is not good
              But this Check will exists as it was created by community demand.
            -->
            <property name="severity" value="ignore"/>
        </module>
        <module name="MissingSwitchDefault"/>
        <module name="ModifiedControlVariable"/>
        <module name="MultipleStringLiterals"/>
        <module name="MultipleVariableDeclarations"/>
        <module name="NestedForDepth">
            <property name="max" value="2"/>
        </module>
        <module name="NestedIfDepth">
            <property name="max" value="3"/>
        </module>
        <module name="NestedTryDepth"/>
        <module name="NoArrayTrailingComma">
            <!-- This Check is conflicting with ArrayTrailingComma -->
            <property name="severity" value="ignore"/>
        </module>
        <module name="NoClone"/>
        <module name="NoCodeInFile"/>
        <module name="NoEnumTrailingComma">
            <!-- This Check is conflicting with our vision of code
                 to be same as ArrayTrailingComma requires it -->
            <property name="severity" value="ignore"/>
        </module>
        <module name="NoFinalizer"/>
        <module name="OneStatementPerLine"/>
        <module name="OverloadMethodsDeclarationOrder"/>
        <module name="PackageDeclaration"/>
        <module name="ParameterAssignment"/>
        <module name="RequireThis"/>
        <module name="ReturnCount">
            <property name="max" value="1"/>
            <property name="maxForVoid" value="0"/>
        </module>
        <module name="SimplifyBooleanExpression"/>
        <module name="SimplifyBooleanReturn"/>
        <module name="StringLiteralEquality"/>
        <module name="SuperClone"/>
        <module name="SuperFinalize"/>
        <module name="UnnecessaryParentheses"/>
        <module name="UnnecessarySemicolonAfterOuterTypeDeclaration"/>
        <module name="UnnecessarySemicolonAfterTypeMemberDeclaration"/>
        <module name="UnnecessarySemicolonInEnumeration"/>
        <module name="UnnecessarySemicolonInTryWithResources"/>
        <module name="VariableDeclarationUsageDistance"/>

        <!-- usuppress javadoc parsing errors, as we test Check not a parser -->
        <module name="SuppressionXpathSingleFilter">
            <property name="message" value="Javadoc comment at column \d+ has parse error"/>
        </module>
    </module>

    <!-- as we run on regression even on non-compiled files we need to skip exceptions on them -->
    <module name="SuppressionSingleFilter">
        <property name="message" value="Exception occurred while parsing"/>
        <property name="checks" value="Checker"/>
    </module>
</module>
